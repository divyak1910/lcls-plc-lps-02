<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AmphosShutterEnable" Id="{fe502755-6cd5-4b23-8e8b-90ce055b744e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AmphosShutterEnable
VAR_INPUT
	fOpcpaVoltage : LREAL; // The voltage of the OPCPA
    fAmphosVoltage : LREAL; // The Amphos voltage
    AmphosStatus :BOOL; //Amphos Laser Shutter Status
    Mode : E_Mode; // Mode of operation
    ShutterStatus : BOOL; //Shutter Status	
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR_IN_OUT CONSTANT
    stErrors : ST_ErrorStates; // Currently detected errors
    stOpcpaSetpoints : ST_LaserSetpoints; // OPCPA setpoints
    stAmphosSetpoints : ST_LaserSetpoints; // The Amphos setpoints
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*// The Amphos Shutter Enable function sends and Enable or Disable bit as an output to be used by the Amphos Shutter Command block
// AmphosShutterEnable := True := OPEN SHUTTER
// AmphosShutterEnable := FALSE := CLOSE SHUTTER
The below logic follows the logic table
Note : In master override modes, the Shutter state will hold the previous state value, unless manually forced
*)

IF (stErrors.bHardwareFailure // Close shutter if there is a hardware failure
   // OR stErrors.bLeakOpticalTableAmphosOn OR stErrors.bLeakOpcpaCarbideOn OR stErrors.bLeakUnderTable // Close shutter if there is a leak on the optical table with the amphos on, a leak under the table, or a leak inside the OPCPA with Carbide on
     AND (
        (MODE <> E_Mode.MASTER_Override AND (NOT GVL_IO.bLoopTempSW01)) OR
        (MODE <> E_Mode.MASTER_Override AND (NOT GVL_IO.bLoopTempSW02)) OR
        (MODE <> E_Mode.MASTER_Override AND (NOT GVL_IO.bLoopTempSW03)) OR
        (MODE <> E_Mode.MASTER_Override AND (NOT GVL_IO.bLoopTempSW04))OR
        (MODE <> E_Mode.MASTER_Override AND (NOT GVL_IO.bLoopTempSW05)))//Close shutter if the amphos is on and the temperature is too high in any loop. Ignore if operator override is enabled
    OR fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage AND stErrors.bOpcpaBeam // Close shutter if in OPCPA beam error state and OPCPA voltage too low
    OR stErrors.bDumpChiller) OR (NOT GVL_IO.bDumpChillerFlow)OR (NOT GVL_IO.bBaseplateChillerFlow)// Close shutter if there is a Dump Chiller error
THEN
    GVL_IO.bAmphosShutterCMD := FALSE;
	GVL_IO.bAmphosShutterEnable := FALSE; 
ELSE
    IF ( MODE = E_Mode.OPCPA_Protection AND (fAmphosVoltage < stAmphosSetpoints.nMinVoltage OR fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage))  //Per LPS Interlock Logic thruth table
    OR
    (MODE = E_Mode.MPC_Protection AND (fAmphosVoltage < stAmphosSetpoints.nMinVoltage OR (NOT AmphosStatus)))
    OR
    (MODE = E_Mode.MPC_Override AND (fAmphosVoltage < stAmphosSetpoints.nMinVoltage OR (NOT AmphosStatus)))
    THEN
    GVL_IO.bAmphosShutterCMD := FALSE;
	GVL_IO.bAmphosShutterEnable := FALSE;
    ELSIF
    (MODE = E_Mode.MASTER_Override OR MODE = E_Mode.OPCPA_Override) 
	THEN
	GVL_IO.bAmphosShutterCMD := GVL_IO.bAmphosShutterEnable; 	
    ELSE
    GVL_IO.bAmphosShutterCMD := TRUE;
	GVL_IO.bAmphosShutterEnable := TRUE;
    END_IF
END_IF ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>