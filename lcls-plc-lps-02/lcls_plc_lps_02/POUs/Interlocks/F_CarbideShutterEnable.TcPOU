<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="F_CarbideShutterEnable" Id="{6b2b070e-0295-4d27-a821-90f06b1926e9}" SpecialFunc="None">
    <Declaration><![CDATA[// Interlock logic for the Carbide Shutter
FUNCTION F_CarbideShutterEnable : BOOL
VAR_INPUT
    fOpcpaVoltage : LREAL; // The voltage of the OPCPA
	fAmphosVoltage : LREAL; // The Amphos voltage
	fMPCVoltage : LREAL; // The Amphos voltage
	AmphosLaserStatus :BOOL; //Amphos Shutter Status
	Mode :E_Mode; // Mode of operation
END_VAR
VAR_IN_OUT CONSTANT
    stErrors : ST_ErrorStates; // Currently detected errors
	stOpcpaSetpoints : ST_LaserSetpoints; // OPCPA setpoints
	stAmphosSetpoints : ST_LaserSetpoints; // The Amphos setpoints
	stMPCSetpoints : ST_LaserSetpoints; // The Amphos setpoints
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (stErrors.bHardwareFailure) // Close carbide shutter if there is a hardware failure
    //OR stErrors.bLeakOpcpaCarbideOn OR stErrors.bLeakUnderTable) // Close carbide shutter if leak in OPCPA with carbide on or if there is a leak under the table
THEN
    F_CarbideShutterEnable := FALSE;
ELSE
	IF ( MODE = E_Mode.OPCPA_Protection AND fOpcpaVoltage < stOpcpaSetpoints.nMinVoltage)  //Per LPS Interlock Logic thruth table
	OR
	(MODE = E_Mode.MPC_Protection AND fMPCVoltage < stMPCSetpoints.nMinVoltage)
    THEN 
	F_CarbideShutterEnable := FALSE;
	ELSE
	F_CarbideShutterEnable := TRUE;
	END_IF   
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>